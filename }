# Git basic commands

0. ssh -T git@github.com (Test the SSH key)
1. Create a README.md in the folder you are in.
2. git init
3. git add -A (track all files)
4. git status (check if the files are tracked)
5. git commit -m "Descriptive message"
6. git remote add origin "SSH url"
7. git push --set-upstream origin master

- Initialize a new git repository:
```shell
git init
```

- Set configuration values for your username and email:
```shell
git config --global user.name <your-name>
git config --global user.email <your-email>
```

- Clone a repository:
```shell
git clone <repository-url>
```

- Add a file to the staging area:
```shell
git add <file>
```

- Add all files to the staging area:
```shell
git add .
```

- Check the unstaged changes:
```shell
git diff
```

- Commit the staged changes:
```shell
git commit -m "message"
```

- Reset staging area to the last commit:
```shell
git reset
```

- Check the stage of the working directory and the staging area:
```shell
git status
```

- Remove a file from the index and working directory:
```shell
git rm <file>
```

- List the commit history:
```shell
git log
```

- Check the metadata and content changes of the commit:
```shell
git show <commit-hash>
```

- List all local branches:
```shell
git branch
```

- Create a new branch:
```shell
git branch <branch-name>
```

- Rename the current branch:
```shell
git branch -m <new-branch-name>
```

- Delete a branch:
```shell
git branch -d <branch-name>
```

- Switch to another branch:
```shell
git checkout <branch-name>
```

- Merge specified branch into the current branch:
```shell
git merge <branch-name>
```

- Create a new connection to a remote repository:
```shell
git remote add <name> <repository-url>
```

- Push the commited changes to a remote repository:
```shell
git push <remote> <branch>
```

- Download the content from a remote repository:
```shell
git pull <remote>
```

- Cleanup unnecessary files and optimize the local repository:
```shell
git gc
```

- Temporarily remove uncommitted changes and save them for later use:
```shell
git stash
```
